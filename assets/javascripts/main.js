// Generated by CoffeeScript 1.7.1
(function() {
  var dependencies;

  requirejs.config({
    baseUrl: '/javascripts',
    paths: {
      'jquery': "//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min",
      'raphael': "./raphael/raphael",
      'morris': "http://cdn.oesmith.co.uk/morris-0.5.0.min",
      'alertify': "./alertify/alertify",
      vendor: './vendor'
    },
    shim: {
      'jquery': {
        exports: 'jQuery'
      },
      'vendor/underscore': {
        exports: '_'
      },
      'vendor/handlebars': {
        exports: 'Handlebars'
      },
      'raphael': {
        exports: 'Raphael'
      },
      'morris': {
        exports: 'Morris'
      },
      'alertify': {
        exports: 'Alertify'
      }
    }
  });

  dependencies = ['jquery', 'vendor/underscore', 'vendor/handlebars', 'movie-ratings-service-client'];

  requirejs(dependencies, function($, _, Handlebars, ratingsService) {
    return requirejs(['morris', 'raphael', 'alertify'], function() {
      var formSection, formTemplate, movieRatingsSection, movieRatingsTemplate, ratedMovieSection, ratedMovieTemplate;
      movieRatingsTemplate = "<div class=\"movie-ratings\">\n  {{#each movieRatings}}\n     <div class=\"movie-component\">\n       <span>Movie Name: {{@key}}</span>\n       <span>Movie Ratings: {{this}}</span>\n     </div>\n  {{/each}}\n</div>";
      ratedMovieTemplate = "<div class=\"rated-movie\" id=\"{{movieName}}\">\n  <div class=\"movie-name\">{{movieName}}</div>\n  <div class=\"rating\">{{rating}}</div>\n  <div class=\"edit\">EDIT</div>\n  <div class=\"delete\">DELETE</div>\n</div>";
      formTemplate = "<form id='create-movie'>\n  <h4>Rate new movies!</h4>\n  <input type='text' id='form-name' name='name' placeholder='Movie Name'>\n  <input type='text' id='form-rating' name='rating' placeholder='Rating'>\n  <input type='submit' value='Create' class='create-button'>\n</form>";
      movieRatingsSection = Handlebars.compile(movieRatingsTemplate);
      ratedMovieSection = Handlebars.compile(ratedMovieTemplate);
      formSection = Handlebars.compile(formTemplate);
      ratingsService.getAllMovieRatings(function(ratings) {
        var avg, i, k, movie, newdata, sum, v, _fn;
        $('body').append("<div id='container'></div>");
        $('body').append("<div id='newchart' style='height: 250px;'></div>");
        newdata = [];
        for (k in ratings) {
          v = ratings[k];
          i = 0;
          sum = 0;
          while (i < v.length) {
            sum += parseInt(v[i]);
            i++;
          }
          avg = sum / v.length;
          newdata.push({
            y: k,
            a: avg.toFixed(1)
          });
        }
        new Morris.Bar({
          element: 'newchart',
          data: newdata,
          xkey: 'y',
          ykeys: ['a'],
          labels: ['Movie Rating']
        });
        $('#container').append(formSection);
        $('#container').append("<div class='existing-movies-block'><h4>All Movies with at least 3 unique ratings</h4></div>");
        _fn = function(movie) {
          return ratingsService.getMovieRating(movie, function(rating) {
            return $('.existing-movies-block').append(ratedMovieSection({
              movieName: movie,
              rating: rating.toFixed(1)
            }));
          });
        };
        for (movie in ratings) {
          _fn(movie);
        }
        $('#container').append(movieRatingsSection({
          movieRatings: ratings
        }));
        $('#container').append("<div class='data-click'>Movie Data</div>");
        $('.movie-ratings').hide();
        $(document).on('click', '.data-click', function() {
          $('.data-click').hide();
          return $('.movie-ratings').show();
        });
        return $(document).on('click', '.movie-ratings', function() {
          $('.movie-ratings').hide();
          return $('.data-click').show();
        });
      });
      $(document).on('submit', "#create-movie", function(e) {
        var name, rating;
        e.preventDefault();
        name = $("#form-name").val();
        rating = $("#form-rating").val();
        return $.ajax({
          type: 'post',
          url: "/api/movieratings/" + name,
          data: {
            rating: parseInt(rating)
          },
          success: function(response) {
            define([".alertify/alertify"], function(alertify) {
              return alertify.success("Success notification");
            });
            if ($("[id='" + name + "']").length) {
              ratingsService.getMovieRating(name, function(newrating) {
                return $("[id='" + name + "']").find(".rating").html(newrating.toFixed(1));
              });
              return ratingsService.getAllMovieRatings(function(ratings) {
                var avg, i, k, newdata, sum, v;
                $('.movie-ratings').remove();
                $('#newchart').html("");
                $('#container').append(movieRatingsSection({
                  movieRatings: ratings
                }));
                $('.movie-ratings').hide();
                newdata = [];
                for (k in ratings) {
                  v = ratings[k];
                  i = 0;
                  sum = 0;
                  while (i < v.length) {
                    sum += parseInt(v[i]);
                    i++;
                  }
                  avg = sum / v.length;
                  newdata.push({
                    y: k,
                    a: Math.floor(avg * 100) / 100
                  });
                }
                return new Morris.Bar({
                  element: 'newchart',
                  data: newdata,
                  xkey: 'y',
                  ykeys: ['a'],
                  labels: ['Movie Rating']
                });
              });
            } else {
              $(".existing-movies-block").append(ratedMovieSection({
                movieName: name,
                rating: "*"
              }));
              return ratingsService.getAllMovieRatings(function(ratings) {
                var avg, i, k, newdata, sum, v;
                $('.movie-ratings').remove();
                $('#newchart').html("");
                $('#container').append(movieRatingsSection({
                  movieRatings: ratings
                }));
                $('.movie-ratings').hide();
                newdata = [];
                for (k in ratings) {
                  v = ratings[k];
                  i = 0;
                  sum = 0;
                  while (i < v.length) {
                    sum += parseInt(v[i]);
                    i++;
                  }
                  avg = sum / v.length;
                  newdata.push({
                    y: k,
                    a: Math.floor(avg * 100) / 100
                  });
                }
                return new Morris.Bar({
                  element: 'newchart',
                  data: newdata,
                  xkey: 'y',
                  ykeys: ['a'],
                  labels: ['Movie Rating']
                });
              });
            }
          }
        });
      });
      $(document).on('click', ".edit", function(object) {
        var movie, movieName, newRating, number, _i, _len;
        movie = $(object.target).parent();
        movieName = movie.attr("id");
        newRating = prompt("Please enter the new rating for '" + movieName + "'.", "Must be at least 3 unique numbers");
        newRating = newRating.split(',');
        for (_i = 0, _len = newRating.length; _i < _len; _i++) {
          number = newRating[_i];
          parseInt(number);
        }
        return $.ajax({
          type: 'put',
          url: "/api/movieratings/" + movieName,
          data: {
            ratings: newRating
          },
          success: function(response) {
            ratingsService.getMovieRating(movieName, function(rating) {
              return movie.find(".rating").html(rating.toFixed(2));
            });
            return ratingsService.getAllMovieRatings(function(ratings) {
              var avg, i, k, newdata, sum, v;
              $('.movie-ratings').remove();
              $('#newchart').html("");
              $('#container').append(movieRatingsSection({
                movieRatings: ratings
              }));
              $('.movie-ratings').hide();
              newdata = [];
              for (k in ratings) {
                v = ratings[k];
                i = 0;
                sum = 0;
                while (i < v.length) {
                  sum += parseInt(v[i]);
                  i++;
                }
                avg = sum / v.length;
                newdata.push({
                  y: k,
                  a: Math.floor(avg * 100) / 100
                });
              }
              return new Morris.Bar({
                element: 'newchart',
                data: newdata,
                xkey: 'y',
                ykeys: ['a'],
                labels: ['Movie Rating']
              });
            });
          }
        });
      });
      return $(document).on('click', ".delete", function(object) {
        var movie, movieName;
        movie = $(object.target).parent();
        movieName = movie.attr("id");
        if (confirm("Delete '" + movieName + "' from database?")) {
          return $.ajax({
            type: 'delete',
            url: "/api/movieratings/" + movieName,
            success: function(response) {
              movie.remove();
              return ratingsService.getAllMovieRatings(function(ratings) {
                var avg, i, k, newdata, sum, v;
                $('.movie-ratings').remove();
                $('#newchart').html("");
                $('#container').append(movieRatingsSection({
                  movieRatings: ratings
                }));
                $('.movie-ratings').hide();
                newdata = [];
                for (k in ratings) {
                  v = ratings[k];
                  i = 0;
                  sum = 0;
                  while (i < v.length) {
                    sum += parseInt(v[i]);
                    i++;
                  }
                  avg = sum / v.length;
                  newdata.push({
                    y: k,
                    a: Math.floor(avg * 100) / 100
                  });
                }
                return new Morris.Bar({
                  element: 'newchart',
                  data: newdata,
                  xkey: 'y',
                  ykeys: ['a'],
                  labels: ['Movie Rating']
                });
              });
            }
          });
        }
      });
    });
  });

}).call(this);
